<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>sim.moveToPose</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<div class="regApiSection">
    <h2>sim.moveToPose</h2>
    <p>Generates object movement data using the <a href="https://github.com/pantor/ruckig#readme">Ruckig online trajectory generator</a>,
by performing interpolations between two poses. The function can operate by handling 4 movement variables (x,y,z and
angle between the two poses), or a single movement variable (t, which requires a metric to be specified for distance
calculation between the two poses). This function can only be called from a script running in a thread, since this is a blocking
operation</p>
</div>

<div class="regApiSection">
    <h3>Synopsis</h3>
    <div class="multi-language-switcher">
    	<code class="hljs language-python coppelia-coppeliasim-script">list endP/endM, float t = sim.moveToPose(int flags, list currentP/currentM, 
                                         list maxVel, list maxAccel, 
                                         list maxJerk, list targetP/targetM, 
                                         func callback, auxData, 
                                         list metric = None, 
                                         float timeStep = 0)</code>
        
        <code class="hljs language-lua coppelia-coppeliasim-script">float[7]/float[12] endP/endM, float t = sim.moveToPose(int flags, 
                                                       float[7]/float[12] currentP/currentM, 
                                                       float[] maxVel, float[] maxAccel, 
                                                       float[] maxJerk, 
                                                       float[7]/float[12] targetP/targetM, 
                                                       func/string callback, auxData, 
                                                       float[4] metric = nil, 
                                                       float timeStep = 0)</code>
    </div>
</div>

<div  class="regApiSection">
    <h3>Arguments</h3>
    
            <ul>
                <li><strong>flags</strong>: <a href="../apiConstants.htm#ruckigFunctions">Ruckig flags</a>. -1 for default flags.</li>
                <li><strong>currentP/currentM</strong>: the start pose, specified via a pose [x y z qx qy qz qw] or transformation matrix [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]</li>
                <li><strong>maxVel</strong>: the maximum allowed velocity. If <em>metric</em> is specified, then this is an array of size 1, otherwse an array of size 4. If sim.ruckig_minVel is specified in flags, then this array should contain twice as many values, first the values for the maximum velocity, then the values for the minimum velocity.</li>
                <li><strong>maxAccel</strong>: the maximum allowed acceleration. If <em>metric</em> is specified, then this is an array of size 1, otherwse an array of size 4. If sim.ruckig_minAccel is specified in flags, then this array should contain twice as many values, first the values for the maximum acceleration, then the values for the minimum acceleration.</li>
                <li><strong>maxJerk</strong>: the maximum allowed jerk. If <em>metric</em> is specified, then this is an array of size 1, otherwse an array of size 4.</li>
                <li><strong>targetP/targetM</strong>: the goal pose, specified via a pose [x y z qx qy qz qw] or transformation matrix [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]</li>
                <li><strong>callback</strong>: a callback function that will be called for each movement step. The arguments provided to the callback function are: currentPose/currentMatrix, currentVel, currentAccel, auxData.</li>
                <li><strong>auxData</strong>: random data that will be forwarded to the callback function.</li>
                <li><strong>metric</strong>: an optional metric, used to compute a pose-pose distance. If metric is None/nil, the movement calculation happens in the 4-dimensional space (x,y,z,angle), otherwise it happens in the 1-dimensional space (t).</li>
                <li><strong>timeStep</strong>: the desired time step size. A value of 0 indicates that the current simulation time step will be used.</li>
            </ul>
        
</div>

<div  class="regApiSection">
    <h3>Return values</h3>
    
            <ul>
                <li><strong>endP/endM</strong>: the pose at the end of the movement, specified via a pose [x y z qx qy qz qw] or transformation matrix [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]</li>
                <li><strong>t</strong>: the leftover time in current simulation step, i.e. the remaining time that was not used for movement.</li>
            </ul>
        
</div>

<div class="regApiSection">

</div>

<p><br>See also:
<ul>
<li><a href="simMoveToConfig.htm">sim.moveToConfig</a></li>
<li><a href="simRuckigPos.htm">sim.ruckigPos</a></li>
</ul>
</p>

</td>
</tr>
</table>
</div>
<link rel="stylesheet" href="../../js/hljs/11.8.0/styles/default.min.css" />
<script src="../../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>
</html>
