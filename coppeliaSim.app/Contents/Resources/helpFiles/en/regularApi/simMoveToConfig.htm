<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>sim.moveToConfig</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<div class="regApiSection">
    <h2>sim.moveToConfig</h2>
    <p>Generates joint movement data using the <a href="https://github.com/pantor/ruckig#readme">Ruckig online trajectory generator</a>.
This function can only be called from scripts running in a thread, since this is a blocking operation</p>
</div>

<div class="regApiSection">
    <h3>Synopsis</h3>
    <div class="multi-language-switcher">
    	<code class="hljs language-python coppelia-coppeliasim-script">list endP, list endV, list endA, float t = sim.moveToConfig(int flags, list currentP, 
                                                            list currentV, list currentA, 
                                                            list maxV, list maxA, 
                                                            list maxJ, list targetP, 
                                                            list targetV, func callback, 
                                                            auxData, list cyclicJoints = None, 
                                                            float timeStep = 0)</code>
        
        <code class="hljs language-lua coppelia-coppeliasim-script">float[] endP, float[] endV, float[] endA, float t = sim.moveToConfig(int flags, float[] currentP, 
                                                                     float[] currentV, 
                                                                     float[] currentA, float[] maxV, 
                                                                     float[] maxA, float[] maxJ, 
                                                                     float[] targetP, float[] targetV, 
                                                                     func/string callback, auxData, 
                                                                     bool[] cyclicJoints = nil, 
                                                                     float timeStep = 0)</code>
    </div>
</div>

<div  class="regApiSection">
    <h3>Arguments</h3>
    
            <ul>
                <li><strong>flags</strong>: <a href="../apiConstants.htm#ruckigFunctions">Ruckig flags</a>. -1 for default flags.</li>
                <li><strong>currentP</strong>: current configuration, i.e. the current linear/angular joint positions, one value for each DoF.</li>
                <li><strong>currentV</strong>: current velocity, one value for each DoF. Can be None/nil in which case a velocity vector of 0 is used.</li>
                <li><strong>currentA</strong>: current acceleration, one value for each DoF. Can be None/nil in which case an acceleration vector of 0 is used.</li>
                <li><strong>maxV</strong>: maximum allowed velocity, one value for each DoF. If sim.ruckig_minvel is specified in flags, then maxVel should contain following values: [maxV_1 ... maxV_n minV_1 ... minV_n], i.e. 2x DoF values.</li>
                <li><strong>maxA</strong>: maximum allowed acceleration, one value for each DoF. If sim.ruckig_minaccel is specified in flags, then maxAccel should contain following values: [maxA_1 ... maxA_n minA_1 ... minA_n], i.e. 2x DoF values.</li>
                <li><strong>maxJ</strong>: maximum allowed jerk, one value for each DoF.</li>
                <li><strong>targetP</strong>: desired target configuration, one value for each DoF.</li>
                <li><strong>targetV</strong>: desired target point velocity, one value for each DoF. Can be None/nil in which case a velocity vector of 0 is used.</li>
                <li><strong>callback</strong>: callback function that will be called for each movement step. The arguments provided to the callback function are: currentConfig, currentVel, currentAccel, auxData.</li>
                <li><strong>auxData</strong>: random data that will be forwarded to the callback function.</li>
                <li><strong>cyclicJoints</strong>: array of booleans indicating which joint is cyclic (for cyclic joints, the movement will always go in the direction that represents the shortest distance to the goal). Can be nil or omitted.</li>
                <li><strong>timeStep</strong>: desired time step size. A value of 0 indicates that the current simulation time step is used</li>
            </ul>
        
</div>

<div  class="regApiSection">
    <h3>Return values</h3>
    
            <ul>
                <li><strong>endP</strong>: the configuration at the end of the movement.</li>
                <li><strong>endV</strong>: the velocity at the end of the movement.</li>
                <li><strong>endA</strong>: the acceleration at the end of the movement.</li>
                <li><strong>t</strong>: the leftover time in current simulation step, i.e. the remaining time that was not used for movement.</li>
            </ul>
        
</div>

<div class="regApiSection">

</div>

<p><br>See also:
<ul>
<li><a href="simMoveToPose.htm">sim.moveToPose</a></li>
<li><a href="simRuckigPos.htm">sim.ruckigPos</a></li>
</ul>
</p>

</td>
</tr>
</table>
</div>
<link rel="stylesheet" href="../../js/hljs/11.8.0/styles/default.min.css" />
<script src="../../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>
</html>
