<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>ROS Interfaces</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>ROS Interfaces</h1>

<p>There is a <a href="rosInterf.htm">ROS interface</a> and a <a href="ros2Interface.htm">ROS2 interface</a> available for CoppeliaSim, both duplicate the C++ ROS/ROS2 API with good fidelity. They are implemented via the <a href="https://github.com/CoppeliaRobotics/simROS" target="_blank">simROS plugin</a> and <a href="https://github.com/CoppeliaRobotics/simROS2" target="_blank">simROS2 plugin</a>. Use the <a href="http://catkin-tools.readthedocs.io/en/latest/">catkin tools</a> to build those packages, otherwise you might run into difficulties.</p>
<p>As an example, a <a href="visionSensors.htm">vision sensor</a> ROS2 publisher could look like:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

def sysCall_init():
    sim = require('sim')
    simROS = require('simROS')

    self.visionSensor = sim.getObject('/Vision_sensor')

    # Enable an image publisher:
    self.pub = simROS2.createPublisher('/image', 'sensor_msgs/msg/Image')
    simROS2.publisherTreatUInt8ArrayAsString(self.pub)

def sysCall_sensing():
    # Publish the image of the vision sensor:
    img, resolution = sim.getVisionSensorImg(self.visionSensor)
    data = {}
    data['header'] = {'stamp': simROS2.getTime(), 'frame_id': 'a'}
    data['height'] = resolution[1]
    data['width'] = resolution[0]
    data['encoding'] = 'rgb8'
    data['is_bigendian'] = 1
    data['step'] = resolution[0] * 3
    data['data'] = img
    simROS2.publish(self.pub, data)

def sysCall_cleanup():
    simROS2.shutdownPublisher(self.pub)</code>
<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_init()
    sim = require('sim')
    simROS = require('simROS')
    visionSensor = sim.getObject('/Vision_sensor')

    -- Enable an image publisher:
    pub = simROS2.createPublisher('/image', 'sensor_msgs/msg/Image')
    simROS2.publisherTreatUInt8ArrayAsString(pub)
end

function sysCall_sensing()
    -- Publish the image of the vision sensor:
    local img, resolution = sim.getVisionSensorImg(visionSensor)
    data = {}
    data.header = {stamp = simROS2.getTime(), frame_id = 'a'}
    data.height = resolution[2]
    data.width = resolution[1]
    data.encoding = 'rgb8'
    data.is_bigendian = 1
    data.step = resolution[1] * 3
    data.data = img
    simROS2.publish(pub, data)
end

function sysCall_cleanup()
    simROS2.shutdownPublisher(pub)
end</code>
</div>
<p>The subscriber on the other hand could look like:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

def sysCall_init():
    sim = require('sim')
    simROS = require('simROS')
    
    # Enable an image subscriber:
    self.sub = simROS2.createSubscription('/image', 'sensor_msgs/msg/Image', image_callback)
    simROS2.subscriptionTreatUInt8ArrayAsString(self.sub)

def image_callback(msg):
    # Here we have received an image
    pass

def sysCall_cleanup():
    simROS2.shutdownSubscription(self.sub)</code>
<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_init()
    sim = require('sim')
    simROS = require('simROS')
    
    -- Enable an image subscriber:
    sub = simROS2.createSubscription('/image', 'sensor_msgs/msg/Image', 'image_callback')
    simROS2.subscriptionTreatUInt8ArrayAsString(sub)
end

function image_callback(msg)
    -- Here we have received an image
end

function sysCall_cleanup()
    simROS2.shutdownSubscription(sub)
end</code>
</div>
<br>




<p>Also have a look at the <a href="rosTutorial.htm">ROS tutorial</a> and the <a href="externalControllerTutorial.htm">external controller tutorial</a>.</p>

<br>
<br>
 </tr>
</table> 
</div>  
  
  
<link rel="stylesheet" href="../js/hljs/11.8.0/styles/default.min.css" />
<script src="../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>

</html>
