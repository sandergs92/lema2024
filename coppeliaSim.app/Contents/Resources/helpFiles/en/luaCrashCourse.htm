<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Lua crash course</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Lua crash course</h1>

<p>Following crash course is an extremely condensed extract from the official Lua reference manual. For more details refer to the free <a href="https://orbitalquark.github.io/lua-quick-reference/">Lua Quick Reference</a> e-book, to the <a href="http://www.lua.org">Lua website</a> and to the numerous examples contained in the demo scenes.<br>
</p>

<br>
<h2>
<a name="lexicalConventions"></a>Lexical conventions
</h2>


<li>
Lua is a case sensitive language. &quot;and&quot;, &quot;And&quot; or &quot;AND&quot; are not the same. </li>

<li>
Following are Lua keywords:
    <code>and</code> <code>break</code> <code>do</code> <code>else</code> <code>elseif</code>
    <code>end</code> <code>false</code> <code>for</code> <code>function</code> <code>if</code>
    <code>in</code> <code>local</code> <code>nil</code> <code>not</code> <code>or</code>
    <code>repeat</code> <code>return</code> <code>then</code> <code>true</code> <code>until</code>
    <code>while</code>
</li>

<li>
Following strings denote other tokens:
    <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code> <code>^</code>
    <code>#</code> <code>==</code> <code>~=</code> <code>&lt;=</code> <code>&gt;=</code>
    <code>&lt;</code> <code>&gt;</code> <code>=</code> <code>(</code> <code>)</code> <code>{</code>
    <code>}</code> <code>[</code> <code>]</code> <code>;</code> <code>:</code> <code>,</code>
    <code>.</code> <code>..</code> <code>...</code>
</li>

<li>
    Literal strings can be delimited by matching single or double quotes (e.g. <code>'hello'</code> or <code>&quot;hello&quot;</code>) </li>


<li>
A comment starts with a double hyphen (--) anywhere outside of a string. e.g.:</li>
<code class="hljs language-lua coppelia-coppeliasim-script">a=4 -- variable a is now 4!</code>

<br>
<h2>
<a name="valuesAndTypes"></a><a name="typesAndValues"></a>Types and values
</h2>

<li>
Lua is a dynamically typed language which means that variables do not have types; only values do.
</li>

<li>
There are 8 basic types in Lua:
<ul>
    <li><code>nil</code>       type of the value nil whose main property is to be different from any other value.
        It usually represents the absence of a useful value</li>
    <li><code>bool</code>   values false and true (both nil and false make a condition false;
        any other value makes it true)</li>
    <li><code>number</code>    both integer and floating-point numbers (has internally two distinct
        representations: long integer and double)</li>
    <li><code>string</code>    arrays of characters (strings may contain any 8-bit character,
        including embedded zeros)</li>
    <li><code>function</code>  Lua functions</li>
    <li><code>userdata</code>  can hold arbitrary C data (corresponds to a block of raw memory)</li>
    <li><code>thread</code>    independent threads of execution used to implement coroutines</li>
    <li><code>table</code>     arrays that can hold values of any type except nil</code></li>
</ul>
</li>


<br>
<h2>
<a name="variables"></a>Variables
</h2>

<li>There are 3 kinds of variables: global variables, local variables and table fields. Any variable is assumed to be global unless explicitly declared as local</li>

<li>
Before the first assignment to a variable, its value is nil</li>

<li>Square brackets are used to index a table (e.g. <code>value=table[x]</code>). The first value in a table is at position 1 (and not 0 as for C arrays)</li>


<br>
<br>
<h2>
<a name="statements"></a>Statements
</h2>

<li>
Relational operators (always result in <strong>false</strong> or <strong>true</strong>)
<ul>
    <li><code>==</code>     equality</li>
    <li><code>~=</code>     negation of equality</li>
    <li><code>&lt;</code>      smaller than</li>
    <li><code>&gt;</code>      bigger than</li>
    <li><code>&lt;=</code>     smaller or equal than</li>
    <li><code>&gt;=</code>     bigger or equal than</li>
</ul>
</li>

<li>Lua allows multiple assignments. The syntax for assignments defines a list of variables on the left side and a list of expressions on the right side. The elements in both lists are separated by commas:</li>
<code class="hljs language-lua coppelia-coppeliasim-script">x,y,z = myTable[1],myTable[2],myTable[3]</code>

<li>
<strong>If</strong> control structure (by example):</li>
<code class="hljs language-lua coppelia-coppeliasim-script">if value1==value2 then
    print('value1 and value2 are same!')
end</code>

<li>
<strong>For</strong> control structure (by example):</li>
<code class="hljs language-lua coppelia-coppeliasim-script">for i=1,4,1 do -- count from 1 to 4 with increments of 1
    print(i)
end</code>

<li>
<strong>While</strong> control structure (by example):</li>
<code class="hljs language-lua coppelia-coppeliasim-script">i=0
while i~=4 do
    i=i+1
end</code>

<li>
<strong>Repeat</strong> control structure (by example):</li>
<code class="hljs language-lua coppelia-coppeliasim-script">i=0
repeat
    i=i+1
until i==4</code>

<li>
<strong>Table</strong> operations (by example):</li>
<code class="hljs language-lua coppelia-coppeliasim-script">myTable={'firstValue',2,3} -- builds a table with 3 values

print(myTable[1]) -- prints the first element in the table

table.insert(myTable,4) -- appends the number 4 to the table</code>

<li>
Concatenation (by example):</li>
<code class="hljs language-lua coppelia-coppeliasim-script">a='hello'
b=' world'
c=a..b -- c contains 'hello world'</code>

<li>
Length operator #:</li>
<code class="hljs language-lua coppelia-coppeliasim-script">stringLength=#'hello world'

tableSize=#{1,2,3,4,5}</code>


<br>
<br>
<h2>
<a name="bitwiseOperators"></a>Bitwise operators
</h2>

<li>Lua supports the following bitwise operators:</li>
<ul>
    <li><code>&amp;</code> bitwise AND</li>
    <li><code>|</code> bitwise OR</li>
    <li><code>~</code> bitwise exclusive OR</li>
    <li><code>&gt;&gt;</code> right shift</li>
    <li><code>&lt;&lt;</code> unary bitwise NOT</li>
    <li><code>~</code> unary bitwise NOT</li>
</ul>


<br>
<br>
<h2>
<a name="coroutines"></a><a name="threads"></a>Coroutines or threads
</h2>

<li>Coroutines are easily created and resumed with:</li>
<code class="hljs language-lua coppelia-coppeliasim-script">-- Create a coroutine:
corout=coroutine.create(coroutineMain)

-- Start/resume a coroutine:
if coroutine.status(corout)~='dead' then
    local ok,errorMsg=coroutine.resume(corout)
    if errorMsg then
        error(debug.traceback(corout,errorMsg),2)
    end
end

-- The coroutine itself:
function coroutineMain()
    while not sim.getSimulationStopping() do
        -- some code
    end
end</code>

<br>
<br>
 </tr>
</table> 
</div>  
  
  
<link rel="stylesheet" href="../js/hljs/11.8.0/styles/default.min.css" />
<script src="../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../js/hljs/11.8.0/languages/xml.min.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>

</html>
