local codeEditorInfos = [[
int meshHandle = simGeom.copyMesh(int meshHandle)
int octreeHandle = simGeom.copyOctree(int octreeHandle)
int ptcloudHandle = simGeom.copyPtcloud(int ptcloudHandle)
int meshHandle = simGeom.createMesh(float[] vertices, int[] indices, float[3] meshOriginPos=nil, float[4] meshOriginQuaternion=nil, float maxTriangleEdgeLength=0.3, int maxTriangleCountInLeafObb=8)
int meshHandle = simGeom.createMeshFromSerializationData(string data)
int octreeHandle = simGeom.createOctreeFromColorPoints(float[] points, float[3] octreeOriginPos=nil, float[4] octreeOriginQuaternion=nil, float maxCellSize=0.05, float[] colors=nil, int[] userData=nil)
int octreeHandle = simGeom.createOctreeFromMesh(int meshHandle, float[3] meshPos, float[4] meshQuaternion, float[3] octreeOriginPos=nil, float[4] octreeOriginQuaternion=nil, float maxCellSize=0.05, int[3] pointColor={0, 0, 0}, int userData=0)
int octreeHandle = simGeom.createOctreeFromOctree(int octreeHandle, float[3] octreePos, float[4] octreeQuaternion, float[3] newOctreeOriginPos=nil, float[4] newOctreeOriginQuaternion=nil, float maxCellSize=0.05, int[3] pointColor={0, 0, 0}, int userData=0)
int octreeHandle = simGeom.createOctreeFromPoints(float[] points, float[3] octreeOriginPos=nil, float[4] octreeOriginQuaternion=nil, float maxCellSize=0.05, int[3] pointColor={0, 0, 0}, int userData=0)
int octreeHandle = simGeom.createOctreeFromSerializationData(string data)
int ptcloudHandle = simGeom.createPtcloudFromColorPoints(float[] points, float[3] octreeOriginPos=nil, float[4] octreeOriginQuaternion=nil, float maxCellSize=0.05, int maxPtsInCell=20, float[] colors=nil, float proximityTolerance=0.005)
int ptcloudHandle = simGeom.createPtcloudFromPoints(float[] points, float[3] octreeOriginPos=nil, float[4] octreeOriginQuaternion=nil, float maxCellSize=0.05, int maxPtsInCell=20, int[3] pointColor={0, 0, 0}, float proximityTolerance=0.005)
int ptcloudHandle = simGeom.createPtcloudFromSerializationData(string data)
simGeom.destroyMesh(int meshHandle)
simGeom.destroyOctree(int octreeHandle)
simGeom.destroyPtcloud(int ptcloudHandle)
float dist, float[3] distSegPt1, float[3] distSegPt2 = simGeom.getBoxBoxDistance(float[3] box1Pos, float[4] box1Quaternion, float[3] box1HalfSize, float[3] box2Pos, float[4] box2Quaternion, float[3] box2HalfSize, bool boxesAreSolid)
float dist, float[3] distSegPt = simGeom.getBoxPointDistance(float[3] boxPos, float[4] boxQuaternion, float[3] boxHalfSize, bool boxIsSolid, float[3] point)
float dist, float[3] distSegPt1, float[3] distSegPt2 = simGeom.getBoxSegmentDistance(float[3] boxPos, float[4] boxQuaternion, float[3] boxHalfSize, bool boxIsSolid, float[3] segmentPt1, float[3] segmentPt2, bool altRoutine=false)
float dist, float[3] distSegPt1, float[3] distSegPt2 = simGeom.getBoxTriangleDistance(float[3] boxPos, float[4] boxQuaternion, float[3] boxHalfSize, bool boxIsSolid, float[3] triPt1, float[3] triPt2, float[3] triPt3, bool altRoutine=false)
bool collision, int[2] cache, float[] intersections = simGeom.getMeshMeshCollision(int mesh1Handle, float[3] mesh1Pos, float[4] mesh1Quaternion, int mesh2Handle, float[3] mesh2Pos, float[4] mesh2Quaternion, int[2] cache=nil, bool returnIntersections=false)
float dist, float[3] distSegPt1, float[3] distSegPt2, int[2] cache = simGeom.getMeshMeshDistance(int mesh1Handle, float[3] mesh1Pos, float[4] mesh1Quaternion, int mesh2Handle, float[3] mesh2Pos, float[4] mesh2Quaternion, float distanceThreshold=0, int[2] cache=nil)
bool collision, int[2] cache = simGeom.getMeshOctreeCollision(int meshHandle, float[3] meshPos, float[4] meshQuaternion, int octreeHandle, float[3] octreePos, float[4] octreeQuaternion, int[2] cache=nil)
float dist, float[3] distSegPt1, float[3] distSegPt2, int[2] cache = simGeom.getMeshOctreeDistance(int meshHandle, float[3] meshPos, float[4] meshQuaternion, int octreeHandle, float[3] octreePos, float[4] octreeQuaternion, float distanceThreshold=0, int[2] cache=nil)
float dist, float[3] distSegPt, int cache = simGeom.getMeshPointDistance(int meshHandle, float[3] meshPos, float[4] meshQuaternion, float[3] point, float distanceThreshold=0, int cache=-1)
float dist, float[3] distSegPt1, float[3] distSegPt2, int[2] cache = simGeom.getMeshPtcloudDistance(int meshHandle, float[3] meshPos, float[4] meshQuaternion, int ptcloudHandle, float[3] ptcloudPos, float[4] ptcloudQuaternion, float distanceThreshold=0, int[2] cache=nil)
bool collision, int cache, float[] intersections = simGeom.getMeshSegmentCollision(int meshHandle, float[3] meshPos, float[4] meshQuaternion, float[3] segmentPt1, float[3] segmentPt2, int cache=-1, bool returnIntersections=false)
float dist, float[3] distSegPt1, float[3] distSegPt2, int cache = simGeom.getMeshSegmentDistance(int meshHandle, float[3] meshPos, float[4] meshQuaternion, float[3] segmentPt1, float[3] segmentPt2, float distanceThreshold=0, int cache=-1)
string data = simGeom.getMeshSerializationData(int meshHandle)
bool collision, int cache, float[] intersections = simGeom.getMeshTriangleCollision(int meshHandle, float[3] meshPos, float[4] meshQuaternion, float[3] triPt1, float[3] triPt2, float[3] triPt3, int cache=-1, bool returnIntersections=false)
float dist, float[3] distSegPt1, float[3] distSegPt2, int cache = simGeom.getMeshTriangleDistance(int meshHandle, float[3] meshPos, float[4] meshQuaternion, float[3] triPt1, float[3] triPt2, float[3] triPt3, float distanceThreshold=0, int cache=-1)
bool collision, int[2] cache = simGeom.getOctreeOctreeCollision(int octree1Handle, float[3] octree1Pos, float[4] octree1Quaternion, int octree2Handle, float[3] octree2Pos, float[4] octree2Quaternion, int[2] cache=nil)
float dist, float[3] distSegPt1, float[3] distSegPt2, int[2] cache = simGeom.getOctreeOctreeDistance(int octree1Handle, float[3] octree1Pos, float[4] octree1Quaternion, int octree2Handle, float[3] octree2Pos, float[4] octree2Quaternion, float distanceThreshold=0, int[2] cache=nil)
bool collision, int cache = simGeom.getOctreePointCollision(int octreeHandle, float[3] octreePos, float[4] octreeQuaternion, float[3] point, int cache=-1)
float dist, float[3] distSegPt, int cache = simGeom.getOctreePointDistance(int octreeHandle, float[3] octreePos, float[4] octreeQuaternion, float[3] point, float distanceThreshold=0, int cache=-1)
bool collision, int[2] cache = simGeom.getOctreePtcloudCollision(int octreeHandle, float[3] octreePos, float[4] octreeQuaternion, int ptcloudHandle, float[3] ptcloudPos, float[4] ptcloudQuaternion, int[2] cache=nil)
float dist, float[3] distSegPt1, float[3] distSegPt2, int[2] cache = simGeom.getOctreePtcloudDistance(int octreeHandle, float[3] octreePos, float[4] octreeQuaternion, int ptcloudHandle, float[3] ptcloudPos, float[4] ptcloudQuaternion, float distanceThreshold=0, int[2] cache=nil)
bool collision, int cache = simGeom.getOctreeSegmentCollision(int octreeHandle, float[3] octreePos, float[4] octreeQuaternion, float[3] segPt1, float[3] segPt2, int cache=-1)
float dist, float[3] distSegPt1, float[3] distSegPt2, int cache = simGeom.getOctreeSegmentDistance(int octreeHandle, float[3] octreePos, float[4] octreeQuaternion, float[3] segPt1, float[3] segPt2, float distanceThreshold=0, int cache=-1)
string data = simGeom.getOctreeSerializationData(int octreeHandle)
bool collision, int cache = simGeom.getOctreeTriangleCollision(int octreeHandle, float[3] octreePos, float[4] octreeQuaternion, float[3] triPt1, float[3] triPt2, float[3] triPt3, int cache=-1)
float dist, float[3] distSegPt1, float[3] distSegPt2, int cache = simGeom.getOctreeTriangleDistance(int octreeHandle, float[3] octreePos, float[4] octreeQuaternion, float[3] triPt1, float[3] triPt2, float[3] triPt3, float distanceThreshold=0, int cache=-1)
float[] positions, float[] colors, int[] userData = simGeom.getOctreeVoxels(int octreeHandle)
float dist, float[3] distSegPt, int cache = simGeom.getPtcloudPointDistance(int ptcloudHandle, float[3] ptcloudPos, float[4] ptcloudQuaternion, float[3] point, float distanceThreshold=0, int cache=-1)
float[] points, float[] colors = simGeom.getPtcloudPoints(int ptcloudHandle, float subsetProportion=1.0)
float dist, float[3] distSegPt1, float[3] distSegPt2, int[2] cache = simGeom.getPtcloudPtcloudDistance(int ptcloud1Handle, float[3] ptcloud1Pos, float[4] ptcloud1Quaternion, int ptcloud2Handle, float[3] ptcloud2Pos, float[4] ptcloud2Quaternion, float distanceThreshold=0, int[2] cache=nil)
float dist, float[3] distSegPt1, float[3] distSegPt2, int cache = simGeom.getPtcloudSegmentDistance(int ptcloudHandle, float[3] ptcloudPos, float[4] ptcloudQuaternion, float[3] segPt1, float[3] segPt2, float distanceThreshold=0, int cache=-1)
string data = simGeom.getPtcloudSerializationData(int octreeHandle)
float dist, float[3] distSegPt1, float[3] distSegPt2, int cache = simGeom.getPtcloudTriangleDistance(int ptcloudHandle, float[3] ptcloudPos, float[4] ptcloudQuaternion, float[3] triPt1, float[3] triPt2, float[3] triPt3, float distanceThreshold=0, int cache=-1)
float dist, float[3] distSegPt = simGeom.getSegmentPointDistance(float[3] segmentPt1, float[3] segmentPt2, float[3] point)
float dist, float[3] distSegPt1, float[3] distSegPt2 = simGeom.getSegmentSegmentDistance(float[3] segment1Pt1, float[3] segment1Pt2, float[3] segment2Pt1, float[3] segment2Pt2)
float[] transformedPoints = simGeom.getTransformedPoints(float[] points, float[3] position, float[4] quaternion)
float[] transformedPoints = simGeom.getTransformedPoints(float[] points, float[3] position, float[3] eulerAngles)
float[] transformedPoints = simGeom.getTransformedPoints(float[] points, float[12] transformationMatrix)
float dist, float[3] distSegPt = simGeom.getTrianglePointDistance(float[3] triPt1, float[3] triPt2, float[3] triPt3, float[3] point)
float dist, float[3] distSegPt1, float[3] distSegPt2 = simGeom.getTriangleSegmentDistance(float[3] triPt1, float[3] triPt2, float[3] triPt3, float[3] segmentPt1, float[3] segmentPt2)
float dist, float[3] distSegPt1, float[3] distSegPt2 = simGeom.getTriangleTriangleDistance(float[3] tri1Pt1, float[3] tri1Pt2, float[3] tri1Pt3, float[3] tri2Pt1, float[3] tri2Pt2, float[3] tri2Pt3)
simGeom.scaleMesh(int meshHandle, float scaleFactor)
simGeom.scaleOctree(int octreeHandle, float scaleFactor)
simGeom.scalePtcloud(int ptcloudHandle, float scaleFactor)
]]

registerCodeEditorInfos("simGeom", codeEditorInfos)
